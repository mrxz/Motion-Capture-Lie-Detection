using System;
using System.IO;
using System.Net;
using System.Net.Sockets;
using System.Collections.Generic;
using System.Threading;

namespace Motion_lie_detection
{
	/**
	 * UdpListener that listens for packets generated by the MVN Studio.
	 * This listener only supports MXTP02, MXTP12, MXTP13 packets.
	 */ 
	public class XSensListener
	{
		/**
		 * The logger for the XSensListener.
		 */
		public static readonly Logger LOG = Logger.getInstance ("XSensListener");

		/**
		 * The UdpClient 
		 */
		private readonly UdpClient client;
		/**
		 * Flag indicating whether or not the listener is listening.
		 */
		private bool running;
		/**
		 * Listening thread.
		 */
		private Thread listeningThread;

		/**
		 * List containing event handlers.
		 */
		private readonly List<XSensEventHandler> eventHandlers;


		public XSensListener (String host, int port)
		{
			client = new UdpClient (new IPEndPoint (IPAddress.Any, port));
			eventHandlers = new List<XSensEventHandler> ();
			LOG.info ("XSensListener created for " + host + ":" + port);
		}

		public bool Start ()
		{
			// Only start a thread if not already running.
			if (running) {
				LOG.warn ("Already running");
				return false;
			}

			// Start thread for reading incoming packets.
			listeningThread = new Thread (Listen);
			listeningThread.Start ();
			running = true;
			return true;
		}

		public bool Stop ()
		{
			// Only stop listening if we're listening.
			if (!running)
				return false;

			// Stop the listening thread.
			listeningThread.Abort ();
			running = false;
			return true;
		}

		public void Listen ()
		{
			// Listen
			LOG.info ("Started listening on port 9763");

			// Spawn a new thread that listens for the packages.
			IPEndPoint endPoint = new IPEndPoint (IPAddress.Any, 0);
			while (true) {
				byte[] packet = client.Receive (ref endPoint);

				handlePacket (packet);
			}
		}

		public void Test() 
		{
			// DEBUG: Send test frame packet.
			byte[] packet = new byte[] {
				0x4d, 0x58, 0x54, 0x50, 0x30, 0x32, 0x00, 0x00, 0x00, 0x01, 0x80, 0x17, 0x00, 0x00, 0x2a, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xbf, 0xb7, 0xc7, 0xce, 0x40, 0x29, 0x0b, 0x52, 0x3f, 0x72, 0xc6, 0x9b, 0x3f, 0x78, 0x7b, 0xfe, 0xbd, 0x7b, 0x1d, 0x0d, 0x3e, 0x3c, 0x08, 0x74, 0xbe, 0x12, 0x2c, 0x88, 0x00, 0x00, 0x00, 0x02, 0xbf, 0xb2, 0xda, 0xfd, 0x40, 0x29, 0x7b, 0x96, 0x3f, 0x85, 0x92, 0x29, 0xbf, 0x6f, 0x62, 0xa6, 0x3c, 0xa9, 0x71, 0x7e, 0xbe, 0x73, 0x6e, 0xf8, 0x3e, 0x86, 0x25, 0xc8, 0x00, 0x00, 0x00, 0x03, 0xbf, 0xac, 0xbc, 0xbe, 0x40, 0x28, 0xe7, 0xe2, 0x3f, 0x91, 0x79, 0x4a, 0xbf, 0x6e, 0x37, 0x69, 0x3c, 0x88, 0x1e, 0x47, 0xbe, 0x78, 0xae, 0xfb, 0x3e, 0x8c, 0x14, 0xa5, 0x00, 0x00, 0x00, 0x04, 0xbf, 0xa6, 0x91, 0xda, 0x40, 0x28, 0x39, 0x4b, 0x3f, 0x9d, 0x43, 0xfa, 0xbf, 0x6c, 0x27, 0x85, 0x3c, 0x20, 0x8b, 0xfc, 0xbe, 0x80, 0xae, 0x10, 0x3e, 0x95, 0xf3, 0x30, 0x00, 0x00, 0x00, 0x05, 0xbf, 0xa0, 0x4b, 0xec, 0x40, 0x27, 0x5c, 0x68, 0x3f, 0xa8, 0xf0, 0x20, 0xbf, 0x5e, 0xfb, 0xe3, 0xbc, 0xd9, 0x5b, 0xbc, 0xbe, 0x96, 0x8b, 0x1a, 0x3e, 0xc9, 0x04, 0xf7, 0x00, 0x00, 0x00, 0x06, 0xbf, 0x96, 0x60, 0x9a, 0x40, 0x24, 0x90, 0x69, 0x3f, 0xb9, 0x9b, 0x0b, 0xbf, 0x60, 0x5f, 0x39, 0xbd, 0x7f, 0xf2, 0x5e, 0xbe, 0xb2, 0x93, 0x29, 0x3e, 0xa6, 0xea, 0x21, 0x00, 0x00, 0x00, 0x07, 0xbf, 0x8f, 0x3d, 0xd1, 0x40, 0x22, 0x75, 0x10, 0x3f, 0xc2, 0xf8, 0x38, 0xbf, 0x76, 0x84, 0x27, 0xbc, 0xd5, 0x71, 0x4c, 0xbe, 0x2a, 0xc3, 0x65, 0x3e, 0x57, 0x5c, 0x8e, 0x00, 0x00, 0x00, 0x08, 0xbf, 0x9c, 0x9b, 0xd0, 0x40, 0x24, 0x16, 0xec, 0x3f, 0xb4, 0xbb, 0x23, 0xbf, 0x50, 0x07, 0xcc, 0x3d, 0xd6, 0x17, 0x7f, 0xbe, 0xc0, 0x8b, 0x97, 0x3e, 0xdd, 0x95, 0x36, 0x00, 0x00, 0x00, 0x09, 0xbf, 0xa8, 0x98, 0x2d, 0x40, 0x1e, 0x47, 0x3d, 0x3f, 0xbe, 0x3b, 0x3f, 0x3f, 0x2e, 0xc4, 0x85, 0x3e, 0x97, 0xb5, 0x6c, 0x3e, 0x23, 0x23, 0x64, 0xbf, 0x26, 0x0e, 0xa4, 0x00, 0x00, 0x00, 0x0a, 0xbf, 0xcf, 0xef, 0x85, 0x40, 0x1e, 0x9f, 0x30, 0x3f, 0xb6, 0x49, 0xc3, 0xbf, 0x20, 0xcc, 0x68, 0xbf, 0x05, 0x5f, 0xbb, 0xbe, 0x77, 0xa5, 0x2b, 0x3f, 0x06, 0x61, 0x8d, 0x00, 0x00, 0x00, 0x0b, 0xbf, 0xed, 0xb8, 0x13, 0x40, 0x20, 0x27, 0xe1, 0x3f, 0xa9, 0x30, 0xe0, 0xbe, 0xdb, 0x66, 0xc7, 0xbf, 0x30, 0x60, 0xd4, 0xbe, 0x65, 0x4b, 0x27, 0x3f, 0x0a, 0x39, 0xde, 0x00, 0x00, 0x00, 0x0c, 0xbf, 0x96, 0xda, 0x2b, 0x40, 0x26, 0xed, 0xfa, 0x3f, 0xb3, 0x36, 0x2f, 0xbf, 0x5b, 0x62, 0xc7, 0x3d, 0xbb, 0x1d, 0x0d, 0xbe, 0x2e, 0xd0, 0xb3, 0x3e, 0xf4, 0x87, 0xdb, 0x00, 0x00, 0x00, 0x0d, 0xbf, 0x87, 0xcc, 0x18, 0x40, 0x2b, 0xee, 0xe5, 0x3f, 0xad, 0x0e, 0xbb, 0xbf, 0x1a, 0x79, 0x24, 0x3f, 0x16, 0xd9, 0x36, 0xbd, 0x62, 0x40, 0xff, 0x3f, 0x08, 0xd1, 0x0c, 0x00, 0x00, 0x00, 0x0e, 0xbf, 0x61, 0x0a, 0x78, 0x40, 0x26, 0x99, 0xc8, 0x3f, 0x8e, 0x24, 0x70, 0x3d, 0xb1, 0xb4, 0x78, 0x3e, 0xef, 0xbd, 0xf1, 0x3e, 0x60, 0xb0, 0xaf, 0x3f, 0x59, 0xfc, 0x8f, 0x00, 0x00, 0x00, 0x0f, 0xbf, 0x5d, 0x46, 0xa2, 0x40, 0x18, 0x14, 0xcb, 0x3f, 0x9d, 0x03, 0xda, 0xbd, 0x94, 0x33, 0x51, 0x3e, 0xd0, 0x0b, 0x78, 0x3e, 0xa8, 0x1f, 0x43, 0x3f, 0x59, 0x7f, 0xd0, 0x00, 0x00, 0x00, 0x10, 0xbf, 0xba, 0x65, 0xf9, 0x40, 0x24, 0x09, 0x2d, 0x3f, 0x77, 0x87, 0x16, 0x3f, 0x68, 0x1f, 0x75, 0xbd, 0xe6, 0xe9, 0xff, 0xbe, 0xaf, 0xc7, 0xc5, 0xbe, 0x5e, 0x9a, 0xf6, 0x00, 0x00, 0x00, 0x11, 0xbf, 0x96, 0x63, 0xfa, 0x40, 0x18, 0xee, 0xd4, 0x3f, 0x1a, 0xcb, 0xa7, 0x3f, 0x66, 0x46, 0x06, 0x3b, 0xf8, 0x16, 0x27, 0x3e, 0xaa, 0x8f, 0xc1, 0xbe, 0x90, 0xaf, 0x81, 0x00, 0x00, 0x00, 0x12, 0xbf, 0xb6, 0x08, 0x96, 0x40, 0x1e, 0x74, 0xb4, 0x3e, 0x8d, 0x33, 0x4c, 0x3f, 0x6b, 0x95, 0xb3, 0x3b, 0x9b, 0xbf, 0x0e, 0x3e, 0x80, 0x48, 0x38, 0xbe, 0x99, 0xe2, 0xdf, 0x00, 0x00, 0x00, 0x13, 0xbf, 0xac, 0x81, 0x0a, 0x40, 0x19, 0x81, 0xe9, 0x3d, 0xf7, 0x6a, 0x2f, 0x3f, 0x69, 0xe3, 0xeb, 0xbc, 0x42, 0xda, 0xdc, 0x3e, 0x8d, 0x3b, 0x6d, 0xbe, 0x98, 0xc7, 0x9f, 0x00, 0x00, 0x00, 0x14, 0xbf, 0xb4, 0x9c, 0x3d, 0x40, 0x2d, 0xdf, 0x4c, 0x3f, 0x6e, 0x20, 0x8a, 0x3f, 0x75, 0x6a, 0x9c, 0xbd, 0xac, 0x9d, 0x9d, 0x3e, 0x1b, 0xaa, 0x15, 0xbe, 0x66, 0xb6, 0x5b, 0x00, 0x00, 0x00, 0x15, 0xbf, 0xc9, 0x47, 0x63, 0x40, 0x2a, 0xf2, 0xb6, 0x3e, 0xf0, 0x5a, 0x4f, 0x3f, 0x5b, 0xd5, 0xed, 0xbc, 0xb3, 0xd8, 0xe0, 0x3e, 0xc2, 0xca, 0xff, 0xbe, 0xaf, 0x64, 0x6b, 0x00, 0x00, 0x00, 0x16, 0xbf, 0xee, 0x31, 0x0e, 0x40, 0x31, 0x06, 0xc8, 0x3e, 0x29, 0x80, 0xb2, 0x3f, 0x64, 0x70, 0x00, 0xbd, 0x7f, 0xb4, 0x81, 0x3e, 0xa0, 0xdf, 0x37, 0xbe, 0xa2, 0xcf, 0xfa, 0x00, 0x00, 0x00, 0x17, 0xbf, 0xe8, 0x45, 0x3d, 0x40, 0x2b, 0x14, 0x2b, 0x3c, 0x05, 0xe3, 0xda, 0x3f, 0x71, 0x25, 0x46, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xab, 0xde, 0xa4 
			};
			handlePacket (packet);
		}

		public void AddEventHandler(XSensEventHandler handler) 
		{
			eventHandlers.Add (handler);
		}

		private void handlePacket (byte[] packet)
		{
			BinaryReader reader = new BigEndianBinaryReader (new MemoryStream (packet));

			Header header = Header.fromBytes (reader);
			Console.WriteLine ("Received: " + header.id);

			// Check the package type.
			switch (header.id.Substring (4)) {
			case "02":
				{
					// Load the positions and quaternions.
					List<Segment> segments = new List<Segment> ();
					for (int i = 0; i < header.numberOfItems; i++) {
						segments.Add(Segment.fromBytes (reader));
					}

					// Call the event handlers.
					foreach (XSensEventHandler eventHandler in eventHandlers)
						eventHandler.onMXTP02 (header, segments);
				}
				break;
			case "12":
				{
					// Read the metadata.
					Metadata metadata = Metadata.fromBytes (packet, 24);

					// Call the event handlers.
					foreach (XSensEventHandler eventHandler in eventHandlers)
						eventHandler.onMXTP12 (header, metadata);
				}
				break;
			case "13":
				{
					// Part One: null-pose
					UInt32 numberOfSegments = reader.ReadUInt32 ();
					List<Segment> segments = new List<Segment> ();
					for (int i = 0; i < numberOfSegments; i++) {
						segments.Add(Segment.nullPoseFromBytes (reader));
					}

					// Part Two: points
					UInt32 numberOfPoints = reader.ReadUInt32 ();
					List<Point> points = new List<Point> ();
					for (int i = 0; i < numberOfPoints; i++) {
						points.Add(Point.fromBytes (reader));
					}

					// Call the event handlers.
					foreach (XSensEventHandler eventHandler in eventHandlers)
						eventHandler.onMXTP13 (header, segments, points);
				}
				break;
			default:
				LOG.warn ("Unsupported package type: " + header.id);
				break;
			}
		}
	}

	/**
	 * Header that is shared among the different packet types.
	 * The total size of the header is 24 bytes.
	 * 6 bytes		String id (e.g. MXTP02)
	 * 4 bytes		Sample counter
	 * 1 byte		Diagram counter
	 * 1 byte		Number of items, in case of MXTP02 it's the number of segments.
	 * 4 bytes		Time code
	 * 1 byte		Character id
	 * 7 bytes		Unused/reserved bytes
	 */
	public class Header
	{
		/**
		 * Six character long 
		 */
		public String id;

		public uint sampleCounter;
		public byte diagramCounter;
		public byte numberOfItems;

		public uint timeCode;
		public byte characterId;

		public static Header fromBytes (BinaryReader reader)
		{
			Header header = new Header ();

			header.id = "";
			byte[] idBytes = reader.ReadBytes (6);
			for (int i = 0; i < idBytes.Length; i++)
				header.id += (char)idBytes [i];
			header.sampleCounter = reader.ReadUInt32 ();
			header.diagramCounter = reader.ReadByte ();
			header.numberOfItems = reader.ReadByte ();

			header.timeCode = reader.ReadUInt32 ();
			header.characterId = reader.ReadByte ();
			reader.ReadBytes (7); // Unused space.

			return header;
		}
	}

	/**
	 * Class representing the body of an MXTP12 packet.
	 * The MXTP12 is a metadata packet.
	 * It differs from the other types by not having a fixed size, but instead using string key/values.
	 */
	public class Metadata
	{
		/**
		 * Dictionary containing the 
		 */
		public readonly Dictionary<String, String> properties = new Dictionary<String, String> ();

		public Metadata (Dictionary<String, String> properties)
		{
			this.properties = properties;
		}

		public static Metadata fromBytes (byte[] bytes, int offset)
		{
			Dictionary<String, String> properties = new Dictionary<string, string> ();

			// Continue reading after the 
			StreamReader reader = new StreamReader (new MemoryStream (bytes, offset, bytes.Length - offset));
			while (!reader.EndOfStream) {
				String line = reader.ReadLine ();
				String[] values = line.Split (':');

				// Note: Weird quirk in C# where a string '\0' is read as-is.
				if (line != "\0")
					properties.Add (values [0], values [1]);
			}

			return new Metadata (properties);
		}
	}

	/**
	 * The segment represents an item in the body of the MXTP02 and MXTP13 packets.
	 */
	public class Segment
	{
		public int id;

		public float x;
		public float y;
		public float z;

		public float q1;
		public float q2;
		public float q3;
		public float q4;

		public static Segment fromBytes (BinaryReader reader)
		{
			Segment segment = new Segment ();

			segment.id = reader.ReadInt32 ();
			segment.x = reader.ReadSingle ();
			segment.y = reader.ReadSingle ();
			segment.z = reader.ReadSingle ();
			segment.q1 = reader.ReadSingle ();
			segment.q2 = reader.ReadSingle ();
			segment.q3 = reader.ReadSingle ();
			segment.q4 = reader.ReadSingle ();

			return segment;
		}

		public static Segment nullPoseFromBytes (BinaryReader reader)
		{
			Segment segment = new Segment ();

			segment.id = reader.ReadInt32 ();
			segment.x = reader.ReadSingle ();
			segment.y = reader.ReadSingle ();
			segment.z = reader.ReadSingle ();
			segment.q1 = 0;
			segment.q2 = 0;
			segment.q3 = 0;
			segment.q4 = 1;

			return segment;
		}
	}

	/**
	 * Class representing the point items in the body of the MXTP13 packet.
	 */
	public class Point
	{
		public ushort id;
		public ushort pointId;
		public String name;
		public uint flags;
		public float x;
		public float y;
		public float z;

		public static Point fromBytes (BinaryReader reader)
		{
			Point point = new Point ();

			point.id = reader.ReadUInt16 ();
			point.pointId = reader.ReadUInt16 ();
			point.name = reader.ReadString ();
			point.flags = reader.ReadUInt32 ();
			point.x = reader.ReadSingle ();
			point.y = reader.ReadSingle ();
			point.z = reader.ReadSingle ();

			return point;
		}
	}

	/**
	 * Event Handler interface for the XSensListener
	 */
	public interface XSensEventHandler
	{
		void onMXTP02 (Header header, List<Segment> segments);
		void onMXTP12 (Header header, Metadata metadata);
		void onMXTP13 (Header header, List<Segment> segments, List<Point> points);
	}
}
